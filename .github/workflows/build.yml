name: CI
on:
  workflow_dispatch:
  schedule:
    - cron: '30 * * * *'
  push:

jobs:
  check_hash:
    runs-on: ubuntu-latest
    outputs:
      before: ${{ steps.before.outputs.hash }}
      after: ${{ steps.after.outputs.hash }}
    steps:
      - uses: actions/checkout@v2
      - id: before
        run: echo "::set-output name=hash::$(cat dev_hash | tr -d '\n')"
      - run: |
          git clone https://github.com/project-violet/violet.git
          cd violet
          git checkout dev
          git rev-parse HEAD > ../dev_hash
          cd ..
      - id: after
        run: echo "::set-output name=hash::$(cat dev_hash | tr -d '\n')"
      - uses: corcc/publish@node
        if: ${{ steps.before.outputs.hash != steps.after.outputs.hash }}
        with:
          TZ: 'Asia/Seoul'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          TASK_NAME: Update dev_hash

  ios-build:
    runs-on: macos-latest
    needs: [ check_hash ]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'project-violet/violet'
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
      - uses: subosito/flutter-action@v2
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        with:
          channel: 'stable'
          
      - uses: actions/setup-python@v2
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        with:
          python-version: '3.8'
          
      - name: Preprocess
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        run: | 
          cd lib/server
          wget -q ${{ secrets.SECRET_SALT }} || echo 'String getValid(String vToken) { return vToken; }' > salt.dart
          wget -q ${{ secrets.SECRET_WSALT }} || echo 'String getValid(String vToken) { return vToken; }' > wsalt.dart
          cd ../..
          python3 preprocess-ios.py
          
      - name: Podfile
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        run: |
          cd ios
          rm Podfile.lock
          flutter clean
          flutter pub get
          pod install
          pod update
          cd ..
          
      - name: Build
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        run: |
          flutter build ios --release --no-codesign
          mkdir -p Payload
          mv ./build/ios/iphoneos/Runner.app Payload
          zip -r -y Payload.zip Payload/Runner.app
          mv Payload.zip Payload.ipa
          
      - name: Upload IPA
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        uses: actions/upload-artifact@v2
        with:
          name: ipa-build
          path: Payload.ipa

  android-build:
    runs-on: ubuntu-latest
    needs: [ check_hash ]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'project-violet/violet'
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
          
      - uses: actions/setup-java@v1
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        with:
          java-version: '12.x'
          
      - uses: subosito/flutter-action@v1
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        with:
          # flutter-version: '2.5.2'
          channel: 'stable'
          
      - uses: actions/setup-python@v2
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        with:
          python-version: '3.8'
          
      - name: Preprocess
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        run: | 
          cd lib/server
          wget -q ${{ secrets.SECRET_SALT }} || echo 'String getValid(String vToken) { return vToken; }' > salt.dart
          wget -q ${{ secrets.SECRET_WSALT }} || echo 'String getValid(String vToken) { return vToken; }' > wsalt.dart
          cd ../..
          python3 preprocess-android.py
          
      - name: Build
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        run: |
          flutter clean
          flutter build apk --release
          
      - name: Upload APK
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        uses: actions/upload-artifact@v2
        with:
          name: apk-build
          path: ./build/app/outputs/apk/release/app-release.apk
      
  release:
    runs-on: ubuntu-latest
    needs: [ check_hash, ios-build, android-build ]
    steps:
      - uses: actions/download-artifact@v2
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        with:
          name: ipa-build
          path: ./
      - uses: actions/download-artifact@v2
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        with:
          name: apk-build
          path: ./      
      - run: find . -type f -name '*.apk'
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
      - run: find . -type f -name '*.ipa'
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
      - name: Release AppImage
        uses: marvinpinto/action-automatic-releases@latest
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        with:
          title: latest-${{ needs.check_hash.outputs.after }}
          automatic_release_tag: latest-${{ needs.check_hash.outputs.after }}
          prerelease: true
          draft: false
          files: |
            *.apk
            *.ipa
          repo_token: ${{ secrets.GITHUB_TOKEN }}
