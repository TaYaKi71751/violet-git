name: CI
on:
  workflow_dispatch:
    inputs:
      force-build-android:
        type: boolean
        default: true
      force-build-ios:
        type: boolean
        default: true
      force-release:
        type: boolean
        default: true
  schedule:
    - cron: '30 * * * *'
  push:

jobs:
  check_hash:
    runs-on: ubuntu-latest
    outputs:
      before: ${{ steps.before.outputs.hash }}
      after: ${{ steps.after.outputs.hash }}
    steps:
      - uses: actions/checkout@v2
      - id: before
        run: echo "::set-output name=hash::$(cat dev_hash | tr -d '\n')"
      - run: |
          git clone https://github.com/project-violet/violet.git
          cd violet
          git checkout dev
          git rev-parse HEAD > ../dev_hash
          cd ..
      - id: after
        run: echo "::set-output name=hash::$(cat dev_hash | tr -d '\n')"
      - uses: corcc/publish@node
        # if: ${{ steps.before.outputs.hash != steps.after.outputs.hash }}
        with:
          TZ: 'Asia/Seoul'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          TASK_NAME: Update dev_hash

  check_version:
    runs-on: ubuntu-latest
    needs: [ check_hash ]
    outputs:
      appversion: ${{ steps.plain.outputs.appversion }}
      appversion_tag: ${{ steps.tag.outputs.appversion }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          git clone https://github.com/project-violet/violet.git
          cd violet
          git checkout dev
          cat pubspec.yaml | grep ^version | tr -d '\n' | tr -d '\r' | rev | cut -d ' ' -f1 | rev | sed -E 's/\+(.+)/\+${{ needs.check_hash.outputs.after }}/g' > ../appversion
          cd ..
      
      - id: plain
        run: echo "::set-output name=appversion::$(cat appversion | tr -d '\n' | tr -d '\r' | tr -d ' ')"
      - id: tag
        run: echo "::set-output name=appversion::$(cat appversion | sed -E 's/\+/\-/g' | tr -d '\n' | tr -d '\r' | tr -d ' ')"
      # - uses: corcc/publish@node
      #   # if: ${{ steps.before.outputs.hash != steps.after.outputs.hash }}
      #   with:
      #     TZ: 'Asia/Seoul'
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      #     TASK_NAME: Update appversion

  ios-build:
    runs-on: macos-latest
    needs: [ check_hash ]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'project-violet/violet'
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-ios == 'true' }}

      - run: |
          # Fix app version to hash
          sed -i -E "s/$(cat pubspec.yaml | grep ^version | sed -E 's/\+/\\\+/g' | tr -d '\n' | tr -d '\r')/$(cat pubspec.yaml | grep ^version | sed -E 's/\+(.+)/\\\+${{ needs.check_hash.outputs.after }}/g' | tr -d '\n' | tr -d '\r')/g" pubspec.yaml
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-ios == 'true' }}

      - uses: subosito/flutter-action@v2
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-ios == 'true' }}
        with:
          channel: 'stable'
          
      - uses: actions/setup-python@v2
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-ios == 'true' }}
        with:
          python-version: '3.8'
          
      - name: Preprocess
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-ios == 'true' }}
        run: | 
          cd lib/server
          wget -q ${{ secrets.SECRET_SALT }} || echo 'String getValid(String vToken) { return vToken; }' > salt.dart
          wget -q ${{ secrets.SECRET_WSALT }} || echo 'String getValid(String vToken) { return vToken; }' > wsalt.dart
          cd ../..
          python3 preprocess-ios.py
          
      - name: Podfile
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-ios == 'true' }}
        run: |
          cd ios
          rm Podfile.lock
          flutter clean
          flutter pub get
          pod install
          pod update
          cd ..
          
      - name: Build
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-ios == 'true' }}
        run: |
          flutter build ios --release --no-codesign
          mkdir -p Payload
          mv ./build/ios/iphoneos/Runner.app Payload
          zip -r -y Payload.zip Payload/Runner.app
          mv Payload.zip Payload.ipa
          
      - name: Upload IPA
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-ios == 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: ipa-build
          path: Payload.ipa

  android-build:
    runs-on: ubuntu-latest
    needs: [ check_hash ]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: 'project-violet/violet'
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-android == 'true' }}

      - run: |
          # Fix app version to hash
          sed -i -E "s/$(cat pubspec.yaml | grep ^version | sed -E 's/\+/\\\+/g' | tr -d '\n' | tr -d '\r')/$(cat pubspec.yaml | grep ^version | sed -E 's/\+(.+)/\\\+${{ needs.check_hash.outputs.after }}/g' | tr -d '\n' | tr -d '\r')/g" pubspec.yaml
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-android == 'true' }}
      - uses: pnpm/action-setup@master
        with:
          version: latest
      - uses: actions/setup-node@main
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-android == 'true' }}
        with:
          node-version: 16
      - run: |
          # Add HEAD_REF to assets
          cp ./.git/$(cat .git/HEAD | tr -d '\n' | rev | cut -d ' ' -f1 | rev | tr -d '\n') ./HEAD
          pnpm i yaml
          node << EOF
            const yaml = require('yaml');
            const fs   = require('fs');
            try {
              var doc = yaml.parse(fs.readFileSync('./pubspec.yaml', 'utf8'));
              doc.flutter.assets.push('HEAD');
              console.log(yaml.stringify(doc));
            }catch(e){}
          EOF
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-android == 'true' }}

      - uses: actions/setup-java@v1
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-android == 'true' }}
        with:
          java-version: '12.x'
          
      - uses: subosito/flutter-action@v1
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-android == 'true' }}
        with:
          # flutter-version: '2.5.2'
          channel: 'stable'
          
      - uses: actions/setup-python@v2
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-android == 'true' }}
        with:
          python-version: '3.8'
          
      - name: Preprocess
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-android == 'true' }}
        run: | 
          cd lib/server
          wget -q ${{ secrets.SECRET_SALT }} || echo 'String getValid(String vToken) { return vToken; }' > salt.dart
          wget -q ${{ secrets.SECRET_WSALT }} || echo 'String getValid(String vToken) { return vToken; }' > wsalt.dart
          cd ../..
          python3 preprocess-android.py
          
      - name: Build
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-android == 'true' }}
        run: |
          flutter clean
          flutter build apk --release
      - name: Upload APK
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-build-android == 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: apk-build
          path: ./build/app/outputs/apk/release/app-release.apk
      
  release:
    runs-on: ubuntu-latest
    needs: [ check_hash, ios-build, android-build, check_version ]
    steps:
      - uses: actions/download-artifact@v2
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || ( github.event.inputs.force-build-ios == 'true' && github.event.inputs.force-release == 'true' ) }}
        with:
          name: ipa-build
          path: ./
      - uses: actions/download-artifact@v2
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || ( github.event.inputs.force-build-android == 'true' && github.event.inputs.force-release == 'true' ) }}
        with:
          name: apk-build
          path: ./      
      - run: find . -type f -name '*.apk'
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-release == 'true' }}
      - run: find . -type f -name '*.ipa'
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-release == 'true' }}
      - name: Release AppImage
        uses: marvinpinto/action-automatic-releases@latest
        if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after || github.event.inputs.force-release == 'true' }}
        with:
          title: ${{ needs.check_version.outputs.appversion }}
          automatic_release_tag: "${{ needs.check_version.outputs.appversion_tag }}"
          prerelease: true
          draft: false
          files: |
            *.apk
            *.ipa
          repo_token: ${{ secrets.GITHUB_TOKEN }}
  update-version-info:
    runs-on: ubuntu-latest
    needs: [ check_hash, android-build, ios-build, release, check_version ]
    steps:
      - uses: actions/checkout@v2
      - run: |
          echo "${{ needs.check_hash.outputs.after }}" > release
          echo "${{ needs.check_version.outputs.appversion }}" > appversion
          echo "app: ${{ needs.check_version.outputs.appversion }}"
          echo "${{ needs.check_version.outputs.appversion_tag }}" > appversion_tag
          echo "tag: ${{ needs.check_version.outputs.appversion_tag }}"
        # if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
      - uses: corcc/publish@node
        # if: ${{ needs.check_hash.outputs.before != needs.check_hash.outputs.after }}
        with:
          TZ: 'Asia/Seoul'
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          TASK_NAME: Update version info
